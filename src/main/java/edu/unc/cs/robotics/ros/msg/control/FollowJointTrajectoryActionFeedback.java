package edu.unc.cs.robotics.ros.msg.control;

import edu.unc.cs.robotics.ros.msg.Header;
import edu.unc.cs.robotics.ros.msg.MessageDeserializer;
import edu.unc.cs.robotics.ros.msg.MessageSerializer;
import edu.unc.cs.robotics.ros.msg.MessageSpec;
import edu.unc.cs.robotics.ros.msg.actionlib.ActionFeedback;
import edu.unc.cs.robotics.ros.msg.actionlib.GoalStatus;

@MessageSpec(
    type = FollowJointTrajectoryActionFeedback.DATATYPE,
    md5sum = FollowJointTrajectoryActionFeedback.MD5SUM,
    definition = FollowJointTrajectoryActionFeedback.DESCRIPTION
)
public class FollowJointTrajectoryActionFeedback extends ActionFeedback<FollowJointTrajectoryFeedback> {
    public static final String DATATYPE = "control_msgs/FollowJointTrajectoryActionFeedback";
    public static final String MD5SUM = "d8920dc4eae9fc107e00999cce4be641";
    public static final String DESCRIPTION = "" +
                                             "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" +
                                             "\n" +
                                             "Header header\n" +
                                             "actionlib_msgs/GoalStatus status\n" +
                                             "FollowJointTrajectoryFeedback feedback\n" +
                                             "\n" +
                                             "================================================================================\n" +
                                             "MSG: std_msgs/Header\n" +
                                             "# Standard metadata for higher-level stamped data types.\n" +
                                             "# This is generally used to communicate timestamped data \n" +
                                             "# in a particular coordinate frame.\n" +
                                             "# \n" +
                                             "# sequence ID: consecutively increasing ID \n" +
                                             "uint32 seq\n" +
                                             "#Two-integer timestamp that is expressed as:\n" +
                                             "# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n" +
                                             "# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n" +
                                             "# time-handling sugar is provided by the client library\n" +
                                             "time stamp\n" +
                                             "#Frame this data is associated with\n" +
                                             "# 0: no frame\n" +
                                             "# 1: global frame\n" +
                                             "string frame_id\n" +
                                             "\n" +
                                             "================================================================================\n" +
                                             "MSG: actionlib_msgs/GoalStatus\n" +
                                             "GoalID goal_id\n" +
                                             "uint8 status\n" +
                                             "uint8 PENDING         = 0   # The goal has yet to be processed by the actionlib server\n" +
                                             "uint8 ACTIVE          = 1   # The goal is currently being processed by the actionlib server\n" +
                                             "uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n" +
                                             "                            #   and has since completed its execution (Terminal State)\n" +
                                             "uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the actionlib server (Terminal State)\n" +
                                             "uint8 ABORTED         = 4   # The goal was aborted during execution by the actionlib server due\n" +
                                             "                            #    to some failure (Terminal State)\n" +
                                             "uint8 REJECTED        = 5   # The goal was rejected by the actionlib server without being processed,\n" +
                                             "                            #    because the goal was unattainable or invalid (Terminal State)\n" +
                                             "uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n" +
                                             "                            #    and has not yet completed execution\n" +
                                             "uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n" +
                                             "                            #    but the actionlib server has not yet confirmed that the goal is canceled\n" +
                                             "uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n" +
                                             "                            #    and was successfully cancelled (Terminal State)\n" +
                                             "uint8 LOST            = 9   # An actionlib client can determine that a goal is LOST. This should not be\n" +
                                             "                            #    sent over the wire by an actionlib server\n" +
                                             "\n" +
                                             "#Allow for the user to associate a string with GoalStatus for debugging\n" +
                                             "string text\n" +
                                             "\n" +
                                             "\n" +
                                             "================================================================================\n" +
                                             "MSG: actionlib_msgs/GoalID\n" +
                                             "# The stamp should store the time at which this goal was requested.\n" +
                                             "# It is used by an actionlib server when it tries to preempt all\n" +
                                             "# goals that were requested before a certain time\n" +
                                             "time stamp\n" +
                                             "\n" +
                                             "# The id provides a way to associate feedback and\n" +
                                             "# result message with specific goal requests. The id\n" +
                                             "# specified must be unique.\n" +
                                             "string id\n" +
                                             "\n" +
                                             "\n" +
                                             "================================================================================\n" +
                                             "MSG: control_msgs/FollowJointTrajectoryFeedback\n" +
                                             "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" +
                                             "Header header\n" +
                                             "string[] joint_names\n" +
                                             "trajectory_msgs/JointTrajectoryPoint desired\n" +
                                             "trajectory_msgs/JointTrajectoryPoint actual\n" +
                                             "trajectory_msgs/JointTrajectoryPoint error\n" +
                                             "\n" +
                                             "\n" +
                                             "================================================================================\n" +
                                             "MSG: trajectory_msgs/JointTrajectoryPoint\n" +
                                             "# Each trajectory point specifies either positions[, velocities[, accelerations]]\n" +
                                             "# or positions[, effort] for the trajectory to be executed.\n" +
                                             "# All specified values are in the same order as the joint names in JointTrajectory.msg\n" +
                                             "\n" +
                                             "float64[] positions\n" +
                                             "float64[] velocities\n" +
                                             "float64[] accelerations\n" +
                                             "float64[] effort\n" +
                                             "duration time_from_start\n";

    public FollowJointTrajectoryActionFeedback() {

    }

    public FollowJointTrajectoryActionFeedback(MessageDeserializer buf) {
        header = new Header(buf);
        status = new GoalStatus(buf);
        feedback = new FollowJointTrajectoryFeedback(buf);
    }

    @Override
    public void serialize(MessageSerializer buf) {
        header.serialize(buf);
        status.serialize(buf);
        feedback.serialize(buf);
    }
}
