package edu.unc.cs.robotics.ros.msg.control;

import edu.unc.cs.robotics.ros.msg.Message;
import edu.unc.cs.robotics.ros.msg.MessageDeserializer;
import edu.unc.cs.robotics.ros.msg.MessageSerializer;

/**
 * Created by jeffi on 6/28/16.
 */
public class FollowJointTrajectoryResult extends Message {
    public static final String DATATYPE = "control_msgs/FollowJointTrajectoryResult";
    public static final String MD5SUM = "493383b18409bfb604b4e26c676401d2";
    public static final String DESCRIPTION = "" +
                                             "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" +
                                             "int32 error_code\n" +
                                             "int32 SUCCESSFUL = 0\n" +
                                             "int32 INVALID_GOAL = -1\n" +
                                             "int32 INVALID_JOINTS = -2\n" +
                                             "int32 OLD_HEADER_TIMESTAMP = -3\n" +
                                             "int32 PATH_TOLERANCE_VIOLATED = -4\n" +
                                             "int32 GOAL_TOLERANCE_VIOLATED = -5\n" +
                                             "\n" +
                                             "# Human readable description of the error code. Contains complementary\n" +
                                             "# information that is especially useful when execution fails, for instance:\n" +
                                             "# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n" +
                                             "#   trajectory is in the past).\n" +
                                             "# - INVALID_JOINTS: The mismatch between the expected controller joints\n" +
                                             "#   and those provided in the goal.\n" +
                                             "# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n" +
                                             "#   violated which tolerance, and by how much.\n" +
                                             "string error_string\n" +
                                             "\n";

    public enum ErrorCode {
        SUCCESSFUL(0),
        INVALID_GOAL(-1),
        INVALID_JOINTS(-2),
        OLD_HEADER_TIMESTAMP(-3),
        PATH_TOLERANCE_VIOLATED(-4),
        GOAL_TOLERANCE_VIOLATED(-5),
        ;

        public final int serialValue;

        ErrorCode(int serialValue) {
            this.serialValue = serialValue;
        }

        static ErrorCode deserialize(MessageDeserializer buf) {
            final int value = buf.getInt();
            switch (value) {
            case 0: return SUCCESSFUL;
            case-1: return INVALID_GOAL;
            case-2: return INVALID_JOINTS;
            case-3: return OLD_HEADER_TIMESTAMP;
            case-4: return PATH_TOLERANCE_VIOLATED;
            case-5: return GOAL_TOLERANCE_VIOLATED;
            default:
                throw new IllegalArgumentException("invalid error_code: " + value);
            }
        }
    }

    public ErrorCode errorCode;
    public String errorString;

    public FollowJointTrajectoryResult() {

    }

    public FollowJointTrajectoryResult(MessageDeserializer buf) {
        errorCode = ErrorCode.deserialize(buf);
        errorString = buf.getString();
    }

    @Override
    public void serialize(MessageSerializer buf) {
        buf.putInt(errorCode.serialValue);
        buf.putString(errorString);
    }

    @Override
    public String toString() {
        return "FollowJointTrajectoryResult{" +
            "errorCode=" + errorCode +
            ", errorString='" + errorString + '\'' +
            '}';
    }
}
