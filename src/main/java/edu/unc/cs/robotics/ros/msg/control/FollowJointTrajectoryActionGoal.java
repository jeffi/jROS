package edu.unc.cs.robotics.ros.msg.control;

import edu.unc.cs.robotics.ros.msg.Header;
import edu.unc.cs.robotics.ros.msg.MessageDeserializer;
import edu.unc.cs.robotics.ros.msg.MessageSpec;
import edu.unc.cs.robotics.ros.msg.actionlib.ActionGoal;
import edu.unc.cs.robotics.ros.msg.actionlib.GoalID;

@MessageSpec(
    type = FollowJointTrajectoryActionGoal.DATATYPE,
    md5sum = FollowJointTrajectoryActionGoal.MD5SUM,
    definition = FollowJointTrajectoryActionGoal.DEFINITION
)
public class FollowJointTrajectoryActionGoal extends ActionGoal<FollowJointTrajectoryGoal> {
    public static final String DATATYPE = "control_msgs/FollowJointTrajectoryActionGoal";
    public static final String MD5SUM = "cff5c1d533bf2f82dd0138d57f4304bb";
    public static final String DEFINITION = "" +
                                            "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" +
                                            "\n" +
                                            "Header header\n" +
                                            "actionlib_msgs/GoalID goal_id\n" +
                                            "FollowJointTrajectoryGoal goal\n" +
                                            "\n" +
                                            "================================================================================\n" +
                                            "MSG: std_msgs/Header\n" +
                                            "# Standard metadata for higher-level stamped data types.\n" +
                                            "# This is generally used to communicate timestamped data \n" +
                                            "# in a particular coordinate frame.\n" +
                                            "# \n" +
                                            "# sequence ID: consecutively increasing ID \n" +
                                            "uint32 seq\n" +
                                            "#Two-integer timestamp that is expressed as:\n" +
                                            "# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n" +
                                            "# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n" +
                                            "# time-handling sugar is provided by the client library\n" +
                                            "time stamp\n" +
                                            "#Frame this data is associated with\n" +
                                            "# 0: no frame\n" +
                                            "# 1: global frame\n" +
                                            "string frame_id\n" +
                                            "\n" +
                                            "================================================================================\n" +
                                            "MSG: actionlib_msgs/GoalID\n" +
                                            "# The stamp should store the time at which this goal was requested.\n" +
                                            "# It is used by an actionlib server when it tries to preempt all\n" +
                                            "# goals that were requested before a certain time\n" +
                                            "time stamp\n" +
                                            "\n" +
                                            "# The id provides a way to associate feedback and\n" +
                                            "# result message with specific goal requests. The id\n" +
                                            "# specified must be unique.\n" +
                                            "string id\n" +
                                            "\n" +
                                            "\n" +
                                            "================================================================================\n" +
                                            "MSG: control_msgs/FollowJointTrajectoryGoal\n" +
                                            "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" +
                                            "# The joint trajectory to follow\n" +
                                            "trajectory_msgs/JointTrajectory trajectory\n" +
                                            "\n" +
                                            "# Tolerances for the trajectory.  If the measured joint values fall\n" +
                                            "# outside the tolerances the trajectory goal is aborted.  Any\n" +
                                            "# tolerances that are not specified (by being omitted or set to 0) are\n" +
                                            "# set to the defaults for the actionlib server (often taken from the\n" +
                                            "# parameter server).\n" +
                                            "\n" +
                                            "# Tolerances applied to the joints as the trajectory is executed.  If\n" +
                                            "# violated, the goal aborts with error_code set to\n" +
                                            "# PATH_TOLERANCE_VIOLATED.\n" +
                                            "JointTolerance[] path_tolerance\n" +
                                            "\n" +
                                            "# To report success, the joints must be within goal_tolerance of the\n" +
                                            "# final trajectory value.  The goal must be achieved by time the\n" +
                                            "# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n" +
                                            "# allows some leeway in time, so that the trajectory goal can still\n" +
                                            "# succeed even if the joints reach the goal some time after the\n" +
                                            "# precise end time of the trajectory).\n" +
                                            "#\n" +
                                            "# If the joints are not within goal_tolerance after \\\"trajectory finish\n" +
                                            "# time\\\" + goal_time_tolerance, the goal aborts with error_code set to\n" +
                                            "# GOAL_TOLERANCE_VIOLATED\n" +
                                            "JointTolerance[] goal_tolerance\n" +
                                            "duration goal_time_tolerance\n" +
                                            "\n" +
                                            "\n" +
                                            "================================================================================\n" +
                                            "MSG: trajectory_msgs/JointTrajectory\n" +
                                            "Header header\n" +
                                            "string[] joint_names\n" +
                                            "JointTrajectoryPoint[] points\n" +
                                            "================================================================================\n" +
                                            "MSG: trajectory_msgs/JointTrajectoryPoint\n" +
                                            "# Each trajectory point specifies either positions[, velocities[, accelerations]]\n" +
                                            "# or positions[, effort] for the trajectory to be executed.\n" +
                                            "# All specified values are in the same order as the joint names in JointTrajectory.msg\n" +
                                            "\n" +
                                            "float64[] positions\n" +
                                            "float64[] velocities\n" +
                                            "float64[] accelerations\n" +
                                            "float64[] effort\n" +
                                            "duration time_from_start\n" +
                                            "\n" +
                                            "================================================================================\n" +
                                            "MSG: control_msgs/JointTolerance\n" +
                                            "# The tolerances specify the amount the position, velocity, and\n" +
                                            "# accelerations can vary from the setpoints.  For example, in the case\n" +
                                            "# of trajectory control, when the actual position varies beyond\n" +
                                            "# (desired position + position tolerance), the trajectory goal may\n" +
                                            "# abort.\n" +
                                            "# \n" +
                                            "# There are two special values for tolerances:\n" +
                                            "#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n" +
                                            "#  * -1 - The tolerance is \\\"erased\\\".  If there was a default, the joint will be\n" +
                                            "#         allowed to move without restriction.\n" +
                                            "\n" +
                                            "string name\n" +
                                            "float64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\n" +
                                            "float64 velocity  # in rad/sec or m/sec\n" +
                                            "float64 acceleration  # in rad/sec^2 or m/sec^2\n";

    public FollowJointTrajectoryActionGoal(Header header, GoalID goalId, FollowJointTrajectoryGoal goal) {
        super(header, goalId, goal);

    }

    public FollowJointTrajectoryActionGoal(MessageDeserializer buf) {
        super(buf, FollowJointTrajectoryGoal::new);
    }
}
